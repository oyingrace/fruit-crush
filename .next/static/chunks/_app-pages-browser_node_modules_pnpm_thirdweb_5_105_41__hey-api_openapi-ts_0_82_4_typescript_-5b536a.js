"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_thirdweb_5_105_41__hey-api_openapi-ts_0_82_4_typescript_-5b536a"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareOpenZeppelinTransaction: function() { return /* binding */ prepareOpenZeppelinTransaction; },\n/* harmony export */   relayOpenZeppelinTransaction: function() { return /* binding */ relayOpenZeppelinTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/encoding/helpers/is-hex.js */ \"(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */\nasync function prepareOpenZeppelinTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [account.address],\n    });\n    const [signature, message] = await (async () => {\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"OpenZeppelin transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"OpenZeppelin transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"OpenZeppelin transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                chainid: BigInt(transaction.chain.id),\n                data: serializableTransaction.data,\n                from: account.address,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                to: serializableTransaction.to,\n                value: 0n,\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        verifyingContract: forrwaderContract.address,\n                        version: \"0.0.1\",\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: { ForwardRequest: ChainAwareForwardRequest },\n                }),\n                message,\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            data: serializableTransaction.data,\n            from: account.address,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            to: serializableTransaction.to,\n            value: 0n,\n        };\n        return [\n            await account.signTypedData({\n                domain: {\n                    chainId: transaction.chain.id,\n                    name: gasless.domainName ?? \"GSNv2 Forwarder\",\n                    verifyingContract: forrwaderContract.address,\n                    version: gasless.domainVersion ?? \"0.0.1\",\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: { ForwardRequest },\n            }),\n            message,\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return { message, messageType, signature };\n}\nconst ForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n];\nconst ChainAwareForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n    { name: \"chainid\", type: \"uint256\" },\n];\n/**\n * @internal\n */\nasync function relayOpenZeppelinTransaction(options) {\n    const { message, messageType, signature } = await prepareOpenZeppelinTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            forwarderAddress: options.gasless.relayerForwarderAddress,\n            request: message,\n            signature,\n            type: messageType,\n        }),\n        method: \"POST\",\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(`Relay transaction failed: ${json.message}`);\n    }\n    const transactionHash = JSON.parse(json.result).txHash;\n    if ((0,_utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(transactionHash)) {\n        return {\n            chain: options.transaction.chain,\n            client: options.transaction.client,\n            transactionHash,\n        };\n    }\n    throw new Error(`Failed to send transaction: ${(0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)(json)}`);\n}\n//# sourceMappingURL=openzeppelin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/thirdweb@5.105.41_@hey-api+openapi-ts@0.82.4_typescript@5.9.2__@types+react-dom@18.3.7__e1a4416e7a5fc1376f0fbb1403784ce8/node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js\n"));

/***/ })

}]);